{{- if eq .Values.redis.provider "standalone" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "featurebyte-oss.fullname" . }}-redis
  labels: {{ include "featurebyte-oss.labels.redis" . | nindent 4 }}
spec:
  replicas: 1
  serviceName: {{ include "featurebyte-oss.fullname" . }}-redis-headless
  selector:
    matchLabels: {{ include "featurebyte-oss.selectorLabels.redis" . | nindent 6 }}
  template:
    metadata:
      labels: {{ include "featurebyte-oss.labels.redis" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "featurebyte-oss.serviceAccountName" . }}
      containers:
        - name: redis
          image: "{{ .Values.redis.standalone.image.repository }}:{{ .Values.redis.standalone.image.tag }}"
          imagePullPolicy: {{ .Values.redis.standalone.image.pullPolicy }}
          command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: redis
          volumeMounts:
            - name: data
              mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.redis.standalone.persistence.size }}
        storageClassName: {{ .Values.redis.standalone.persistence.storageClass }}
{{- end }}
